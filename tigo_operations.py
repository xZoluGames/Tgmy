#!/usr/bin/env python3
"""
Script para gesti√≥n de operaciones Tigo Money
Utiliza el IdToken de credenciales.json para autorizaci√≥n
"""

import json
import requests
import time
import os
from datetime import datetime
from pathlib import Path
import signal
import sys
import urllib3

# Deshabilitar advertencias SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class TigoMoneyOperations:
    def __init__(self):
        self.base_url = "https://py.tigomoney.io"
        self.api_key = "rqt5y3XnRI6FM17kKuENR53J2DUTTOM35djPZl6I"
        self.id_token = None
        self.headers = {}
        self.running = True
        
        # Configurar carpetas
        self.numbers_info_dir = Path("NumbersInfo")
        self.pending_ops_dir = Path("PendingOperations")
        self.numbers_info_dir.mkdir(exist_ok=True)
        self.pending_ops_dir.mkdir(exist_ok=True)
        
        # Cargar credenciales
        self.load_credentials()
        
    def load_credentials(self):
        """Carga el IdToken desde credenciales.json"""
        try:
            with open("credenciales.json", "r", encoding="utf-8") as f:
                credentials = json.load(f)
                self.id_token = credentials.get("IdToken")
                
                if not self.id_token:
                    print("‚ùå No se encontr√≥ IdToken en credenciales.json")
                    sys.exit(1)
                    
                # Configurar headers comunes
                self.headers = {
                    "authorization": self.id_token,
                    "x-api-key": self.api_key,
                    "content-type": "application/json",
                    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
                    "origin": "https://moneyapp.tigo.com.py",
                    "referer": "https://moneyapp.tigo.com.py/",
                    "accept": "*/*",
                    "accept-language": "es-ES,es;q=0.9"
                }
                
                print("‚úÖ Credenciales cargadas exitosamente")
                
        except FileNotFoundError:
            print("‚ùå No se encontr√≥ el archivo credenciales.json")
            print("   Por favor, ejecute primero el script de autenticaci√≥n")
            sys.exit(1)
        except json.JSONDecodeError:
            print("‚ùå Error al leer credenciales.json")
            sys.exit(1)
    
    def validate_number(self, number):
        """Valida que el n√∫mero tenga 10 d√≠gitos y solo contenga n√∫meros"""
        if not number.isdigit():
            return False
        if len(number) != 10:
            return False
        return True
    
    def get_account_info(self, number):
        """Obtiene informaci√≥n de la cuenta para un n√∫mero dado"""
        url = f"{self.base_url}/accounts/msisdn/{number}/accountinfo"
        
        print(f"\nüîç Obteniendo informaci√≥n del n√∫mero {number}...")
        
        try:
            response = requests.get(url, headers=self.headers, timeout=30, verify=False)
            
            if response.status_code == 200:
                data = response.json()
                
                # Guardar en archivo
                file_path = self.numbers_info_dir / f"{number}.json"
                with open(file_path, "w", encoding="utf-8") as f:
                    json.dump(data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ Informaci√≥n obtenida y guardada en {file_path}")
                
                # Mostrar resumen
                if "name" in data and "fullName" in data["name"]:
                    print(f"   Nombre: {data['name']['fullName']}")
                if "status" in data:
                    print(f"   Estado: {data['status']}")
                if "subStatus" in data:
                    print(f"   Sub-Estado: {data['subStatus']}")
                    
                return data
            else:
                print(f"‚ùå Error al obtener informaci√≥n: {response.status_code}")
                if response.text:
                    print(f"   Respuesta: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return None
    
    def get_pending_operations(self, number):
        """Obtiene las operaciones pendientes para un n√∫mero dado"""
        url = f"{self.base_url}/accounts/msisdn/{number}/pendingoperations"
        
        print(f"\nüîç Consultando operaciones pendientes para {number}...")
        
        try:
            response = requests.get(url, headers=self.headers, timeout=30, verify=False)
            
            if response.status_code == 200:
                data = response.json()
                
                if not data or data == []:
                    print("‚ÑπÔ∏è No hay operaciones pendientes")
                    return []
                
                print(f"‚úÖ Se encontraron {len(data)} operaci√≥n(es) pendiente(s)")
                
                # Mostrar detalles de las operaciones
                for i, op in enumerate(data, 1):
                    print(f"\n   Operaci√≥n {i}:")
                    print(f"   - Tipo: {op.get('type', 'N/A')}")
                    print(f"   - Monto: {op.get('currency', '')} {op.get('amount', 'N/A')}")
                    print(f"   - Descripci√≥n: {op.get('descriptionText', 'N/A')}")
                    print(f"   - Referencia: {op.get('pendingReference', 'N/A')}")
                    print(f"   - Fecha solicitud: {op.get('requestDate', 'N/A')}")
                    print(f"   - Fecha expiraci√≥n: {op.get('expirationDate', 'N/A')}")
                    
                    # Buscar notificationText en metadata
                    metadata = op.get('metadata', [])
                    for meta in metadata:
                        if meta.get('key') == 'notificationText':
                            print(f"   - Notificaci√≥n: {meta.get('value', '')}")
                
                return data
            else:
                print(f"‚ùå Error al obtener operaciones: {response.status_code}")
                if response.text:
                    print(f"   Respuesta: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return None
    
    def accept_pending_operation(self, pending_reference, number):
        """Acepta una operaci√≥n pendiente"""
        url = f"{self.base_url}/accounts/pendingoperations/{pending_reference}"
        
        print(f"\n‚úÖ Aceptando operaci√≥n con referencia {pending_reference}...")
        
        data = {
            "op": "REPLACE",
            "path": "status",
            "value": "confirm"
        }
        
        try:
            response = requests.patch(url, headers=self.headers, json=data, timeout=30, verify=False)
            
            if response.status_code in [200, 201]:
                result = response.json()
                print(f"‚úÖ Operaci√≥n aceptada exitosamente")
                print(f"   - Referencia de transacci√≥n: {result.get('transactionReference', 'N/A')}")
                print(f"   - Estado: {result.get('status', 'N/A')}")
                return result
            else:
                print(f"‚ùå Error al aceptar operaci√≥n: {response.status_code}")
                if response.text:
                    print(f"   Respuesta: {response.text}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return None
    
    def save_pending_operation_result(self, number, pending_ops, accept_result):
        """Guarda el resultado de una operaci√≥n pendiente aceptada"""
        file_path = self.pending_ops_dir / f"{number}.json"
        
        # Cargar datos existentes si el archivo existe
        existing_data = []
        if file_path.exists():
            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    existing_data = json.load(f)
                    if not isinstance(existing_data, list):
                        existing_data = [existing_data]
            except:
                existing_data = []
        
        # Crear nuevo registro
        new_record = {
            "timestamp": datetime.now().isoformat(),
            "pending_operations": pending_ops,
            "accept_result": accept_result
        }
        
        existing_data.append(new_record)
        
        # Guardar datos actualizados
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(existing_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Resultado guardado en {file_path}")
    
    def option_get_info(self):
        """Opci√≥n 1: Obtener informaci√≥n del n√∫mero"""
        number = input("\nüì± Ingrese el n√∫mero (10 d√≠gitos): ").strip()
        
        if not self.validate_number(number):
            print("‚ùå El n√∫mero debe tener exactamente 10 d√≠gitos num√©ricos")
            return
        
        self.get_account_info(number)
    
    def option_pending_operations(self):
        """Opci√≥n 2: Obtener y gestionar operaciones pendientes"""
        number = input("\nüì± Ingrese el n√∫mero (10 d√≠gitos): ").strip()
        
        if not self.validate_number(number):
            print("‚ùå El n√∫mero debe tener exactamente 10 d√≠gitos num√©ricos")
            return
        
        pending_ops = self.get_pending_operations(number)
        
        if pending_ops and pending_ops != []:
            print("\n" + "=" * 50)
            choice = input("¬øDesea aceptar la(s) operaci√≥n(es) pendiente(s)? (s/n): ").strip().lower()
            
            if choice == 's':
                for op in pending_ops:
                    pending_ref = op.get('pendingReference')
                    if pending_ref:
                        result = self.accept_pending_operation(pending_ref, number)
                        if result:
                            self.save_pending_operation_result(number, pending_ops, result)
                        else:
                            print("‚ùå No se pudo aceptar la operaci√≥n, regresando al men√∫...")
                            return
            else:
                print("‚ÑπÔ∏è Operaci√≥n cancelada por el usuario")
    
    def signal_handler(self, sig, frame):
        """Manejador para Ctrl+C"""
        print("\n\n‚ö†Ô∏è Modo autom√°tico cancelado por el usuario")
        self.running = False
    
    def option_automatic_mode(self):
        """Opci√≥n 3: Modo autom√°tico"""
        number = input("\nüì± Ingrese el n√∫mero (10 d√≠gitos): ").strip()
        
        if not self.validate_number(number):
            print("‚ùå El n√∫mero debe tener exactamente 10 d√≠gitos num√©ricos")
            return
        
        # Obtener informaci√≥n inicial
        info = self.get_account_info(number)
        if not info:
            print("‚ùå No se pudo obtener informaci√≥n del n√∫mero")
            return
        
        print("\n" + "=" * 50)
        print("ü§ñ MODO AUTOM√ÅTICO ACTIVADO")
        print("   Consultando operaciones pendientes cada 5 segundos...")
        print("   Presione Ctrl+C para detener")
        print("=" * 50)
        
        # Configurar manejador de se√±al
        signal.signal(signal.SIGINT, self.signal_handler)
        self.running = True
        
        consecutive_errors = 0
        max_consecutive_errors = 3
        
        while self.running:
            try:
                # Obtener operaciones pendientes
                pending_ops = self.get_pending_operations(number)
                
                if pending_ops is None:
                    consecutive_errors += 1
                    if consecutive_errors >= max_consecutive_errors:
                        print(f"\n‚ùå Se alcanz√≥ el l√≠mite de {max_consecutive_errors} errores consecutivos")
                        print("   Deteniendo modo autom√°tico...")
                        break
                else:
                    consecutive_errors = 0  # Resetear contador de errores
                    
                    if pending_ops and pending_ops != []:
                        print(f"\nüéØ ¬°Operaci√≥n pendiente detectada! Aceptando autom√°ticamente...")
                        
                        for op in pending_ops:
                            pending_ref = op.get('pendingReference')
                            if pending_ref:
                                result = self.accept_pending_operation(pending_ref, number)
                                if result:
                                    self.save_pending_operation_result(number, pending_ops, result)
                                    print("‚úÖ Operaci√≥n procesada y guardada exitosamente")
                    else:
                        print(f"‚è≥ [{datetime.now().strftime('%H:%M:%S')}] Sin operaciones pendientes...")
                
                # Esperar 5 segundos antes de la siguiente consulta
                if self.running:
                    time.sleep(5)
                    
            except Exception as e:
                print(f"\n‚ùå Error inesperado: {e}")
                break
        
        print("\n" + "=" * 50)
        input("Presione Enter para volver al men√∫ principal...")
    
    def main_menu(self):
        """Men√∫ principal del programa"""
        while True:
            print("\n" + "=" * 50)
            print("   TIGO MONEY - SISTEMA DE OPERACIONES")
            print("=" * 50)
            print("\nüìã Opciones disponibles:")
            print("   1. Obtener Informaci√≥n del n√∫mero")
            print("   2. Obtener Operaciones Pendientes")
            print("   3. Modo Autom√°tico")
            print("   4. Salir")
            print()
            
            choice = input("Seleccione una opci√≥n (1-4): ").strip()
            
            if choice == "1":
                self.option_get_info()
                input("\nPresione Enter para continuar...")
                
            elif choice == "2":
                self.option_pending_operations()
                input("\nPresione Enter para continuar...")
                
            elif choice == "3":
                self.option_automatic_mode()
                
            elif choice == "4":
                print("\nüëã ¬°Hasta luego!")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Por favor seleccione 1, 2, 3 o 4")

def main():
    print("=" * 50)
    print("   TIGO MONEY - SISTEMA DE OPERACIONES")
    print("=" * 50)
    print("‚ö†Ô∏è  Verificaci√≥n SSL deshabilitada para compatibilidad")
    
    try:
        app = TigoMoneyOperations()
        app.main_menu()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Programa terminado por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()