#!/usr/bin/env python3
"""
Gestor de Configuraciones de Seguridad AWS Cognito
Permite configurar MFA, cambiar contrase√±a, gestionar n√∫meros y otros ajustes
Compatible con el sistema Tigo Money
"""

import json
import requests
import base64
import getpass
from datetime import datetime
import urllib3
import sys
import re

# Deshabilitar advertencias SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class CognitoSecurityManager:
    def __init__(self):
        self.region = "us-east-1"
        self.base_url = f"https://cognito-idp.{self.region}.amazonaws.com/"
        self.credentials = None
        self.access_token = None
        self.username = None
        self.user_attributes = {}
        self.mfa_options = []
        self.pool_mfa_config = {}
        self.headers = {}
        
    def load_credentials(self):
        """Carga las credenciales desde credenciales.json"""
        try:
            with open("credenciales.json", "r", encoding="utf-8") as f:
                self.credentials = json.load(f)
                
                self.access_token = self.credentials.get("AccessToken")
                if not self.access_token:
                    print("‚ùå No se encontr√≥ AccessToken en credenciales.json")
                    return False
                
                # Configurar headers
                self.headers = {
                    'Content-Type': 'application/x-amz-json-1.1',
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService'
                }
                
                # Decodificar token para obtener informaci√≥n
                self.decode_token()
                
                print("‚úÖ Credenciales cargadas exitosamente")
                return True
                
        except FileNotFoundError:
            print("‚ùå No se encontr√≥ el archivo credenciales.json")
            print("   Por favor, ejecute primero el script de autenticaci√≥n")
            return False
        except json.JSONDecodeError:
            print("‚ùå Error al leer credenciales.json")
            return False
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            return False
    
    def decode_token(self):
        """Decodifica el access token para obtener informaci√≥n"""
        try:
            parts = self.access_token.split('.')
            if len(parts) >= 2:
                payload = parts[1]
                # Agregar padding si es necesario
                payload += '=' * (4 - len(payload) % 4)
                decoded = base64.urlsafe_b64decode(payload)
                token_info = json.loads(decoded)
                
                self.username = token_info.get('username')
                
                return token_info
        except Exception as e:
            print(f"‚ö†Ô∏è  Error decodificando token: {e}")
            return {}
    
    def get_user_info(self):
        """Obtiene informaci√≥n completa del usuario actual"""
        print("\nüìã OBTENIENDO INFORMACI√ìN DEL USUARIO")
        print("-" * 50)
        
        try:
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.GetUser'
                },
                json={
                    'AccessToken': self.access_token
                },
                verify=False
            )
            
            if response.status_code == 200:
                user_data = response.json()
                
                print("‚úÖ Informaci√≥n del usuario obtenida:")
                print(f"   Username: {user_data.get('Username', 'N/A')}")
                
                # Guardar atributos
                self.user_attributes = {}
                if 'UserAttributes' in user_data:
                    print("\n   üìù Atributos del usuario:")
                    for attr in user_data['UserAttributes']:
                        name = attr.get('Name', '')
                        value = attr.get('Value', '')
                        self.user_attributes[name] = value
                        
                        # Mostrar atributos importantes
                        if name in ['email', 'phone_number', 'email_verified', 'phone_number_verified']:
                            verified = " ‚úÖ" if name.endswith('_verified') and value == 'true' else ""
                            print(f"      {name}: {value}{verified}")
                
                # Guardar opciones MFA
                self.mfa_options = user_data.get('MFAOptions', [])
                if self.mfa_options:
                    print("\n   üîê Opciones MFA configuradas:")
                    for mfa in self.mfa_options:
                        print(f"      Tipo: {mfa.get('DeliveryMedium', 'N/A')}")
                        print(f"      Destino: {mfa.get('AttributeName', 'N/A')}")
                else:
                    print("\n   ‚ÑπÔ∏è  No hay MFA configurado")
                
                # Mostrar preferencias MFA
                if 'UserMFASettingList' in user_data:
                    print("\n   üîí Configuraci√≥n MFA actual:")
                    for setting in user_data['UserMFASettingList']:
                        print(f"      - {setting}")
                
                if 'PreferredMfaSetting' in user_data:
                    print(f"   ‚≠ê MFA preferido: {user_data['PreferredMfaSetting']}")
                
                return user_data
            else:
                print(f"‚ùå Error: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   Mensaje: {error_data.get('message', response.text)}")
                except:
                    print(f"   Respuesta: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error en GetUser: {e}")
            return None
    
    def update_phone_number(self):
        """Actualiza o agrega el n√∫mero de tel√©fono del usuario"""
        print("\nüì± GESTI√ìN DE N√öMERO DE TEL√âFONO")
        print("-" * 50)
        
        current_phone = self.user_attributes.get('phone_number', 'No configurado')
        phone_verified = self.user_attributes.get('phone_number_verified', 'false')
        
        print(f"   N√∫mero actual: {current_phone}")
        print(f"   Verificado: {'‚úÖ S√≠' if phone_verified == 'true' else '‚ùå No'}")
        
        print("\n   Opciones:")
        print("   1. Cambiar/Agregar n√∫mero")
        print("   2. Eliminar n√∫mero actual")
        print("   3. Verificar n√∫mero actual")
        print("   4. Cancelar")
        
        choice = input("\n   Seleccione (1-4): ").strip()
        
        if choice == '1':
            return self.set_phone_number()
        elif choice == '2':
            return self.remove_phone_number()
        elif choice == '3':
            return self.verify_attribute('phone_number')
        else:
            print("   Operaci√≥n cancelada")
            return False
    
    def set_phone_number(self):
        """Establece un nuevo n√∫mero de tel√©fono"""
        print("\nüì± ESTABLECER NUEVO N√öMERO")
        print("-" * 50)
        
        print("   Formato requerido: +595XXXXXXXXX")
        new_phone = input("   Nuevo n√∫mero (con +595): ").strip()
        
        # Validar formato
        if not new_phone.startswith("+595"):
            print("‚ùå El n√∫mero debe comenzar con +595")
            return False
        
        # Validar que solo contenga n√∫meros despu√©s del c√≥digo de pa√≠s
        phone_digits = new_phone[4:]  # Quitar +595
        if not phone_digits.isdigit() or len(phone_digits) < 9:
            print("‚ùå Formato de n√∫mero inv√°lido")
            return False
        
        try:
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.UpdateUserAttributes'
                },
                json={
                    'AccessToken': self.access_token,
                    'UserAttributes': [
                        {
                            'Name': 'phone_number',
                            'Value': new_phone
                        }
                    ]
                },
                verify=False
            )
            
            if response.status_code == 200:
                print("‚úÖ N√∫mero actualizado exitosamente")
                print("   Se enviar√° un c√≥digo de verificaci√≥n por SMS")
                
                # Actualizar atributos locales
                self.user_attributes['phone_number'] = new_phone
                self.user_attributes['phone_number_verified'] = 'false'
                
                # Solicitar verificaci√≥n
                verify = input("\n   ¬øDesea verificar el n√∫mero ahora? (s/n): ").strip().lower()
                if verify == 's':
                    return self.verify_attribute('phone_number')
                
                return True
            else:
                print(f"‚ùå Error al actualizar n√∫mero: {response.status_code}")
                try:
                    error_data = response.json()
                    error_type = error_data.get('__type', '')
                    
                    if 'InvalidParameterException' in error_type:
                        print("   El formato del n√∫mero es inv√°lido")
                    elif 'AliasExistsException' in error_type:
                        print("   Este n√∫mero ya est√° registrado en otra cuenta")
                    else:
                        print(f"   Mensaje: {error_data.get('message', response.text)}")
                except:
                    print(f"   Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error actualizando n√∫mero: {e}")
            return False
    
    def remove_phone_number(self):
        """Elimina el n√∫mero de tel√©fono del usuario"""
        print("\nüóëÔ∏è  ELIMINAR N√öMERO DE TEL√âFONO")
        print("-" * 50)
        
        if 'phone_number' not in self.user_attributes:
            print("‚ÑπÔ∏è  No hay n√∫mero configurado")
            return False
        
        print("‚ö†Ô∏è  ADVERTENCIA: Esto deshabilitar√° SMS MFA si est√° activo")
        confirm = input("   ¬øEst√° seguro? (s/n): ").strip().lower()
        
        if confirm != 's':
            print("   Operaci√≥n cancelada")
            return False
        
        try:
            # Primero deshabilitar SMS MFA si est√° activo
            self.set_mfa_preference(sms_enabled=False)
            
            # Eliminar el atributo phone_number (establecerlo vac√≠o)
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.DeleteUserAttributes'
                },
                json={
                    'AccessToken': self.access_token,
                    'UserAttributeNames': ['phone_number']
                },
                verify=False
            )
            
            if response.status_code == 200:
                print("‚úÖ N√∫mero eliminado exitosamente")
                
                # Actualizar atributos locales
                if 'phone_number' in self.user_attributes:
                    del self.user_attributes['phone_number']
                if 'phone_number_verified' in self.user_attributes:
                    del self.user_attributes['phone_number_verified']
                
                return True
            else:
                print(f"‚ùå Error al eliminar n√∫mero: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   Mensaje: {error_data.get('message', response.text)}")
                except:
                    print(f"   Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error eliminando n√∫mero: {e}")
            return False
    
    def set_mfa_preference(self, sms_enabled=None, totp_enabled=None):
        """Configura las preferencias de MFA del usuario"""
        print("\nüîê CONFIGURANDO PREFERENCIAS MFA")
        print("-" * 50)
        
        request_data = {
            'AccessToken': self.access_token
        }
        
        # Configurar SMS MFA
        if sms_enabled is not None:
            request_data['SMSMfaSettings'] = {
                'Enabled': sms_enabled,
                'PreferredMfa': sms_enabled
            }
            action = "habilitado" if sms_enabled else "deshabilitado"
            print(f"   SMS MFA ser√° {action}")
        
        # Configurar TOTP MFA (aplicaciones como Google Authenticator)
        if totp_enabled is not None:
            request_data['SoftwareTokenMfaSettings'] = {
                'Enabled': totp_enabled,
                'PreferredMfa': totp_enabled
            }
            action = "habilitado" if totp_enabled else "deshabilitado"
            print(f"   TOTP MFA ser√° {action}")
        
        try:
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.SetUserMFAPreference'
                },
                json=request_data,
                verify=False
            )
            
            if response.status_code == 200:
                print("‚úÖ Preferencias MFA actualizadas exitosamente")
                
                # Actualizar credenciales locales
                if "mfa_settings" not in self.credentials:
                    self.credentials["mfa_settings"] = {}
                
                if sms_enabled is not None:
                    self.credentials["mfa_settings"]["sms_enabled"] = sms_enabled
                if totp_enabled is not None:
                    self.credentials["mfa_settings"]["totp_enabled"] = totp_enabled
                self.credentials["mfa_settings"]["updated"] = datetime.now().isoformat()
                
                self.save_credentials()
                return True
            else:
                print(f"‚ùå Error: {response.status_code}")
                try:
                    error_data = response.json()
                    error_type = error_data.get('__type', '')
                    
                    if 'InvalidParameterException' in error_type:
                        if sms_enabled:
                            print("   No se puede habilitar SMS MFA sin un n√∫mero verificado")
                        else:
                            print("   Configuraci√≥n inv√°lida")
                    else:
                        print(f"   Mensaje: {error_data.get('message', response.text)}")
                except:
                    print(f"   Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en SetUserMFAPreference: {e}")
            return False
    
    def check_pool_mfa_configuration(self):
        """Verifica si el pool de usuarios tiene TOTP habilitado"""
        print("\nüîç VERIFICANDO CONFIGURACI√ìN MFA DEL POOL")
        print("-" * 50)
        
        # Nota: Este endpoint requerir√≠a permisos administrativos
        # Por ahora, intentaremos configurar TOTP y manejar el error si no est√° habilitado
        
        print("   ‚ÑπÔ∏è  Verificando soporte para TOTP MFA...")
        
        # Intentar una operaci√≥n simple con TOTP para verificar si est√° habilitado
        try:
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.AssociateSoftwareToken'
                },
                json={
                    'AccessToken': self.access_token
                },
                verify=False
            )
            
            if response.status_code == 200:
                print("   ‚úÖ TOTP MFA est√° habilitado en el pool")
                return True
            elif response.status_code == 400:
                error_data = response.json()
                error_type = error_data.get('__type', '')
                
                if 'SoftwareTokenMFANotFoundException' in error_type:
                    print("   ‚ùå TOTP MFA NO est√° habilitado en este pool de usuarios")
                    print("   ‚ÑπÔ∏è  Solo SMS MFA est√° disponible")
                    return False
                else:
                    print(f"   ‚ö†Ô∏è  Estado desconocido: {error_data.get('message', '')}")
                    return None
            else:
                print(f"   ‚ö†Ô∏è  No se pudo verificar: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Error verificando: {e}")
            return None
    
    def disable_all_mfa(self):
        """Deshabilita completamente MFA"""
        print("\n‚ö†Ô∏è  DESHABILITANDO TODO MFA")
        print("-" * 50)
        print("   Esto reducir√° la seguridad de tu cuenta")
        
        confirm = input("   ¬øEst√°s seguro? (s/n): ").strip().lower()
        if confirm != 's':
            print("‚ùå Operaci√≥n cancelada")
            return False
        
        return self.set_mfa_preference(sms_enabled=False, totp_enabled=False)
    
    def enable_sms_mfa_only(self):
        """Habilita solo MFA por SMS"""
        print("\nüì± HABILITANDO MFA POR SMS")
        print("-" * 50)
        
        # Verificar que hay un n√∫mero verificado
        phone = self.user_attributes.get('phone_number')
        phone_verified = self.user_attributes.get('phone_number_verified', 'false')
        
        if not phone:
            print("‚ùå No hay n√∫mero de tel√©fono configurado")
            print("   Configure un n√∫mero primero (Opci√≥n 9)")
            return False
        
        if phone_verified != 'true':
            print("‚ö†Ô∏è  El n√∫mero no est√° verificado")
            verify = input("   ¬øDesea verificarlo ahora? (s/n): ").strip().lower()
            if verify == 's':
                if not self.verify_attribute('phone_number'):
                    return False
        
        return self.set_mfa_preference(sms_enabled=True, totp_enabled=False)
    
    def change_password(self):
        """Cambia la contrase√±a del usuario"""
        print("\nüîë CAMBIO DE CONTRASE√ëA")
        print("-" * 50)
        
        # Solicitar contrase√±a actual
        print("   Ingrese la contrase√±a ACTUAL (sin el prefijo COG):")
        current_password = getpass.getpass("   Contrase√±a actual: ").strip()
        current_password = "COG" + current_password
        
        # Solicitar nueva contrase√±a
        print("\n   Ingrese la NUEVA contrase√±a (sin el prefijo COG):")
        new_password = getpass.getpass("   Nueva contrase√±a: ").strip()
        new_password_confirm = getpass.getpass("   Confirme nueva contrase√±a: ").strip()
        
        if new_password != new_password_confirm:
            print("‚ùå Las contrase√±as no coinciden")
            return False
        
        new_password = "COG" + new_password
        
        try:
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.ChangePassword'
                },
                json={
                    'AccessToken': self.access_token,
                    'PreviousPassword': current_password,
                    'ProposedPassword': new_password
                },
                verify=False
            )
            
            if response.status_code == 200:
                print("‚úÖ Contrase√±a cambiada exitosamente")
                print("   Use la nueva contrase√±a en su pr√≥ximo inicio de sesi√≥n")
                return True
            else:
                print(f"‚ùå Error al cambiar contrase√±a: {response.status_code}")
                try:
                    error_data = response.json()
                    message = error_data.get('message', '')
                    
                    if 'NotAuthorizedException' in str(error_data):
                        print("   La contrase√±a actual es incorrecta")
                    elif 'InvalidPasswordException' in str(error_data):
                        print("   La nueva contrase√±a no cumple con los requisitos")
                        print("   Debe tener al menos 8 caracteres, may√∫sculas, min√∫sculas y n√∫meros")
                    else:
                        print(f"   Mensaje: {message}")
                except:
                    print(f"   Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en ChangePassword: {e}")
            return False
    
    def update_email(self):
        """Actualiza el email del usuario"""
        print("\nüìß ACTUALIZAR EMAIL")
        print("-" * 50)
        
        current_email = self.user_attributes.get('email', 'No configurado')
        print(f"   Email actual: {current_email}")
        
        new_email = input("   Nuevo email: ").strip()
        if not new_email or '@' not in new_email:
            print("‚ùå Email inv√°lido")
            return False
        
        try:
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.UpdateUserAttributes'
                },
                json={
                    'AccessToken': self.access_token,
                    'UserAttributes': [
                        {
                            'Name': 'email',
                            'Value': new_email
                        }
                    ]
                },
                verify=False
            )
            
            if response.status_code == 200:
                print("‚úÖ Email actualizado exitosamente")
                print("   Se enviar√° un c√≥digo de verificaci√≥n al nuevo email")
                
                # Actualizar atributos locales
                self.user_attributes['email'] = new_email
                self.user_attributes['email_verified'] = 'false'
                
                # Solicitar verificaci√≥n
                verify = input("\n   ¬øDesea verificar el email ahora? (s/n): ").strip().lower()
                if verify == 's':
                    return self.verify_attribute('email')
                
                return True
            else:
                print(f"‚ùå Error: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   Mensaje: {error_data.get('message', response.text)}")
                except:
                    print(f"   Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en UpdateUserAttributes: {e}")
            return False
    
    def verify_attribute(self, attribute_name):
        """Inicia la verificaci√≥n de un atributo (email o phone_number)"""
        print(f"\n‚úâÔ∏è  VERIFICACI√ìN DE {attribute_name.upper()}")
        print("-" * 50)
        
        # Verificar que el atributo existe
        if attribute_name not in self.user_attributes:
            print(f"‚ùå No hay {attribute_name} configurado")
            return False
        
        try:
            # Solicitar c√≥digo de verificaci√≥n
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode'
                },
                json={
                    'AccessToken': self.access_token,
                    'AttributeName': attribute_name
                },
                verify=False
            )
            
            if response.status_code == 200:
                result = response.json()
                delivery = result.get('CodeDeliveryDetails', {})
                
                print(f"‚úÖ C√≥digo de verificaci√≥n enviado")
                print(f"   Destino: {delivery.get('Destination', 'N/A')}")
                print(f"   Medio: {delivery.get('DeliveryMedium', 'N/A')}")
                
                # Solicitar c√≥digo al usuario
                code = input("\n   Ingrese el c√≥digo de verificaci√≥n: ").strip()
                
                if code:
                    # Verificar el c√≥digo
                    verify_response = requests.post(
                        self.base_url,
                        headers={
                            **self.headers,
                            'X-Amz-Target': 'AWSCognitoIdentityProviderService.VerifyUserAttribute'
                        },
                        json={
                            'AccessToken': self.access_token,
                            'AttributeName': attribute_name,
                            'Code': code
                        },
                        verify=False
                    )
                    
                    if verify_response.status_code == 200:
                        print(f"‚úÖ {attribute_name} verificado exitosamente")
                        
                        # Actualizar atributos locales
                        self.user_attributes[f"{attribute_name}_verified"] = 'true'
                        
                        return True
                    else:
                        print("‚ùå C√≥digo incorrecto o expirado")
                        return False
            else:
                print(f"‚ùå Error al solicitar c√≥digo: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   Mensaje: {error_data.get('message', response.text)}")
                except:
                    print(f"   Respuesta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n: {e}")
            return False
    
    def setup_totp_mfa(self):
        """Configura MFA con aplicaci√≥n autenticadora (TOTP)"""
        print("\nüì± CONFIGURAR MFA CON APLICACI√ìN AUTENTICADORA")
        print("-" * 50)
        
        # Verificar primero si TOTP est√° habilitado en el pool
        totp_available = self.check_pool_mfa_configuration()
        
        if totp_available == False:
            print("\n‚ùå TOTP MFA no est√° disponible en este sistema")
            print("   Solo puede usar SMS MFA")
            print("\n   Opciones alternativas:")
            print("   1. Use SMS MFA (Opci√≥n 3 en el men√∫ principal)")
            print("   2. Contacte al administrador para habilitar TOTP en el pool")
            return False
        elif totp_available == None:
            print("\n‚ö†Ô∏è  No se pudo verificar la disponibilidad de TOTP")
            confirm = input("   ¬øDesea intentar configurarlo de todos modos? (s/n): ").strip().lower()
            if confirm != 's':
                return False
        
        print("   Compatible con Google Authenticator, Authy, Microsoft Authenticator, etc.")
        
        try:
            # Asociar token de software
            response = requests.post(
                self.base_url,
                headers={
                    **self.headers,
                    'X-Amz-Target': 'AWSCognitoIdentityProviderService.AssociateSoftwareToken'
                },
                json={
                    'AccessToken': self.access_token
                },
                verify=False
            )
            
            if response.status_code == 200:
                result = response.json()
                secret_code = result.get('SecretCode', '')
                
                if secret_code:
                    print("\n‚úÖ C√≥digo secreto generado")
                    print("\nüì± INSTRUCCIONES:")
                    print("1. Abra su aplicaci√≥n autenticadora")
                    print("2. Agregue una nueva cuenta")
                    print("3. Escanee el c√≥digo QR o ingrese manualmente:")
                    print(f"\n   üîë C√≥digo secreto: {secret_code}")
                    print(f"   üìß Cuenta: {self.username or 'TigoMoney'}")
                    print("   üè¢ Emisor: AWS Cognito")
                    
                    # Solicitar c√≥digo de verificaci√≥n
                    print("\n4. Ingrese el c√≥digo de 6 d√≠gitos de su aplicaci√≥n:")
                    totp_code = input("   C√≥digo: ").strip()
                    
                    if totp_code and len(totp_code) == 6:
                        # Verificar el token de software
                        verify_response = requests.post(
                            self.base_url,
                            headers={
                                **self.headers,
                                'X-Amz-Target': 'AWSCognitoIdentityProviderService.VerifySoftwareToken'
                            },
                            json={
                                'AccessToken': self.access_token,
                                'UserCode': totp_code
                            },
                            verify=False
                        )
                        
                        if verify_response.status_code == 200:
                            print("‚úÖ Aplicaci√≥n autenticadora configurada exitosamente")
                            
                            # Habilitar TOTP MFA
                            self.set_mfa_preference(totp_enabled=True)
                            return True
                        else:
                            print("‚ùå C√≥digo incorrecto")
                            return False
                    else:
                        print("‚ùå C√≥digo inv√°lido")
                        return False
                else:
                    print("‚ùå No se pudo generar el c√≥digo secreto")
                    return False
            elif response.status_code == 400:
                error_data = response.json()
                error_type = error_data.get('__type', '')
                
                if 'SoftwareTokenMFANotFoundException' in error_type:
                    print("‚ùå TOTP MFA no est√° habilitado en este pool de usuarios")
                    print("   Solo SMS MFA est√° disponible")
                else:
                    print(f"‚ùå Error: {error_data.get('message', response.text)}")
                return False
            else:
                print(f"‚ùå Error: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error configurando TOTP: {e}")
            return False
    
    def list_mfa_options(self):
        """Lista todas las opciones MFA disponibles y su estado"""
        print("\nüîê ESTADO DE OPCIONES MFA")
        print("-" * 50)
        
        print("\n1. SMS MFA:")
        print("   - Estado: ", end="")
        
        phone = self.user_attributes.get('phone_number', None)
        phone_verified = self.user_attributes.get('phone_number_verified', 'false')
        
        if not phone:
            print("‚ùå No disponible (sin n√∫mero)")
        elif phone_verified != 'true':
            print("‚ö†Ô∏è  Disponible pero no verificado")
        else:
            print("‚úÖ Disponible y verificado")
        
        print(f"   - N√∫mero: {phone if phone else 'No configurado'}")
        print(f"   - Verificado: {'‚úÖ S√≠' if phone_verified == 'true' else '‚ùå No'}")
        
        # Verificar si SMS MFA est√° activo
        sms_active = False
        for mfa in self.mfa_options:
            if mfa.get('DeliveryMedium') == 'SMS':
                sms_active = True
                break
        print(f"   - MFA Activo: {'‚úÖ S√≠' if sms_active else '‚ùå No'}")
        
        print("\n2. TOTP MFA (Aplicaci√≥n Autenticadora):")
        
        # Verificar disponibilidad de TOTP
        totp_status = self.check_pool_mfa_configuration()
        if totp_status == False:
            print("   - Estado: ‚ùå No habilitado en el pool")
            print("   - Esta opci√≥n no est√° disponible en este sistema")
        elif totp_status == True:
            print("   - Estado: ‚úÖ Disponible")
            print("   - Compatible con: Google Authenticator, Authy, etc.")
        else:
            print("   - Estado: ‚ö†Ô∏è  Desconocido")
        
        print("\n3. Sin MFA:")
        print("   - ‚ö†Ô∏è  NO RECOMENDADO")
        print("   - Reduce significativamente la seguridad")
        print("   - Solo contrase√±a para acceder")
        
        # Mostrar configuraci√≥n actual
        if self.credentials and "mfa_settings" in self.credentials:
            mfa_settings = self.credentials["mfa_settings"]
            print("\nüìä Configuraci√≥n guardada localmente:")
            print(f"   - SMS habilitado: {mfa_settings.get('sms_enabled', 'N/A')}")
            print(f"   - TOTP habilitado: {mfa_settings.get('totp_enabled', 'N/A')}")
            print(f"   - √öltima actualizaci√≥n: {mfa_settings.get('updated', 'N/A')}")
    
    def save_credentials(self):
        """Guarda las credenciales actualizadas"""
        try:
            self.credentials["timestamp"] = datetime.now().isoformat()
            
            with open("credenciales.json", "w", encoding="utf-8") as f:
                json.dump(self.credentials, f, indent=2, ensure_ascii=False)
            
            return True
        except Exception as e:
            print(f"‚ùå Error al guardar credenciales: {e}")
            return False
    
    def export_security_config(self):
        """Exporta la configuraci√≥n de seguridad actual"""
        print("\nüíæ EXPORTANDO CONFIGURACI√ìN DE SEGURIDAD")
        print("-" * 50)
        
        config = {
            "timestamp": datetime.now().isoformat(),
            "username": self.username,
            "attributes": self.user_attributes,
            "mfa_options": self.mfa_options,
            "security_settings": {
                "phone_number": self.user_attributes.get('phone_number', None),
                "phone_verified": self.user_attributes.get('phone_number_verified', 'false'),
                "email": self.user_attributes.get('email', None),
                "email_verified": self.user_attributes.get('email_verified', 'false'),
                "mfa_configured": len(self.mfa_options) > 0
            }
        }
        
        filename = f"security_config_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Configuraci√≥n exportada a: {filename}")
            return True
        except Exception as e:
            print(f"‚ùå Error al exportar: {e}")
            return False
    
    def main_menu(self):
        """Men√∫ principal del gestor de seguridad"""
        while True:
            print("\n" + "=" * 60)
            print("   üîê GESTOR DE SEGURIDAD - TIGO MONEY")
            print("=" * 60)
            print("\nüìã Opciones disponibles:")
            print("   1. üìã Ver informaci√≥n del usuario y configuraci√≥n actual")
            print("   2. üö´ Deshabilitar TODO MFA (reduce seguridad)")
            print("   3. üì± Habilitar solo MFA por SMS")
            print("   4. üì≤ Configurar MFA con aplicaci√≥n autenticadora")
            print("   5. üîë Cambiar contrase√±a")
            print("   6. üìß Actualizar email")
            print("   7. ‚úâÔ∏è  Verificar email actual")
            print("   8. üìû Verificar n√∫mero de tel√©fono")
            print("   9. üì± Gestionar n√∫mero de tel√©fono (cambiar/eliminar)")
            print("  10. üìä Ver estado de opciones MFA")
            print("  11. üíæ Exportar configuraci√≥n de seguridad")
            print("  12. üö™ Salir")
            print()
            
            choice = input("Seleccione una opci√≥n (1-12): ").strip()
            
            if choice == '1':
                self.get_user_info()
                
            elif choice == '2':
                self.disable_all_mfa()
                
            elif choice == '3':
                self.enable_sms_mfa_only()
                
            elif choice == '4':
                self.setup_totp_mfa()
                
            elif choice == '5':
                self.change_password()
                
            elif choice == '6':
                self.update_email()
                
            elif choice == '7':
                self.verify_attribute('email')
                
            elif choice == '8':
                self.verify_attribute('phone_number')
                
            elif choice == '9':
                self.update_phone_number()
                
            elif choice == '10':
                self.list_mfa_options()
                
            elif choice == '11':
                self.export_security_config()
                
            elif choice == '12':
                print("\nüëã ¬°Hasta luego!")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida")
            
            if choice in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']:
                input("\nPresione Enter para continuar...")

def main():
    print("=" * 50)
    print("   GESTOR DE SEGURIDAD - TIGO MONEY")
    print("=" * 50)
    print("‚ö†Ô∏è  Verificaci√≥n SSL deshabilitada para compatibilidad")
    
    manager = CognitoSecurityManager()
    
    # Cargar credenciales
    if not manager.load_credentials():
        input("\nPresione Enter para salir...")
        sys.exit(1)
    
    print("\n‚ö†Ô∏è  ADVERTENCIA DE SEGURIDAD")
    print("-" * 50)
    print("Este m√≥dulo permite modificar configuraciones cr√≠ticas de seguridad.")
    print("Use con precauci√≥n y bajo su propia responsabilidad.")
    
    # Obtener informaci√≥n inicial
    manager.get_user_info()
    
    # Ejecutar men√∫ principal
    manager.main_menu()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Proceso cancelado por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
        input("\nPresione Enter para salir...")